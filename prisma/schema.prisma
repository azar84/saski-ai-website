generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url = "file:./dev.db"
}

model SiteSettings {
  id                       Int      @id @default(autoincrement())
  logoUrl                  String?
  logoLightUrl             String?
  logoDarkUrl              String?
  faviconUrl               String?
  faviconLightUrl          String?
  faviconDarkUrl           String?
  smtpEnabled              Boolean  @default(false)
  smtpHost                 String?
  smtpPort                 Int?     @default(587)
  smtpSecure               Boolean  @default(true)
  smtpUsername             String?
  smtpPassword             String?
  smtpFromEmail            String?
  smtpFromName             String?
  smtpReplyTo              String?
  emailSignature           String?
  emailFooterText          String?
  emailBrandingEnabled     Boolean  @default(true)
  adminNotificationEmail   String?
  emailLoggingEnabled      Boolean  @default(true)
  emailRateLimitPerHour    Int?     @default(100)
  companyPhone             String?
  companyEmail             String?
  companyAddress           String?
  socialFacebook           String?
  socialTwitter            String?
  socialLinkedin           String?
  socialInstagram          String?
  socialYoutube            String?
  footerNewsletterFormId   Int?
  footerCopyrightMessage   String?
  footerMenuIds            String?
  footerShowContactInfo    Boolean  @default(true)
  footerShowSocialLinks    Boolean  @default(true)
  footerCompanyName        String?
  footerCompanyDescription String?
  footerBackgroundColor    String?  @default("#F9FAFB")
  footerTextColor          String?  @default("#374151")
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@map("site_settings")
}

model DesignSystem {
  id                  Int      @id @default(autoincrement())
  primaryColor        String   @default("#5243E9")
  primaryColorLight   String   @default("#6366F1")
  primaryColorDark    String   @default("#4338CA")
  secondaryColor      String   @default("#7C3AED")
  accentColor         String   @default("#06B6D4")
  successColor        String   @default("#10B981")
  warningColor        String   @default("#F59E0B")
  errorColor          String   @default("#EF4444")
  infoColor           String   @default("#3B82F6")
  grayLight           String   @default("#F9FAFB")
  grayMedium          String   @default("#6B7280")
  grayDark            String   @default("#374151")
  backgroundPrimary   String   @default("#FFFFFF")
  backgroundSecondary String   @default("#F6F8FC")
  backgroundDark      String   @default("#0F1A2A")
  textPrimary         String   @default("#1F2937")
  textSecondary       String   @default("#6B7280")
  textMuted           String   @default("#9CA3AF")
  fontFamily          String   @default("Manrope")
  fontFamilyMono      String   @default("ui-monospace")
  fontSizeBase        String   @default("16px")
  lineHeightBase      String   @default("1.5")
  fontWeightNormal    String   @default("400")
  fontWeightMedium    String   @default("500")
  fontWeightBold      String   @default("700")
  spacingXs           String   @default("4px")
  spacingSm           String   @default("8px")
  spacingMd           String   @default("16px")
  spacingLg           String   @default("24px")
  spacingXl           String   @default("32px")
  spacing2xl          String   @default("48px")
  borderRadiusSm      String   @default("4px")
  borderRadiusMd      String   @default("8px")
  borderRadiusLg      String   @default("12px")
  borderRadiusXl      String   @default("16px")
  borderRadiusFull    String   @default("9999px")
  shadowSm            String   @default("0 1px 2px 0 rgb(0 0 0 / 0.05)")
  shadowMd            String   @default("0 4px 6px -1px rgb(0 0 0 / 0.1)")
  shadowLg            String   @default("0 10px 15px -3px rgb(0 0 0 / 0.1)")
  shadowXl            String   @default("0 20px 25px -5px rgb(0 0 0 / 0.1)")
  animationFast       String   @default("150ms")
  animationNormal     String   @default("300ms")
  animationSlow       String   @default("500ms")
  breakpointSm        String   @default("640px")
  breakpointMd        String   @default("768px")
  breakpointLg        String   @default("1024px")
  breakpointXl        String   @default("1280px")
  breakpoint2xl       String   @default("1536px")
  themeMode           String   @default("light")
  customVariables     String?
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("design_system")
}

model Page {
  id              Int                  @id @default(autoincrement())
  slug            String               @unique
  title           String
  metaTitle       String?
  metaDesc        String?
  sortOrder       Int                  @default(0)
  showInHeader    Boolean              @default(false)
  showInFooter    Boolean              @default(false)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  menuItems       MenuItem[]
  features        Feature[]
  headerNavItems  HeaderNavItem[]
  featureGroups   PageFeatureGroup[]
  htmlSections    PageHtmlSection[]
  pricingSections PagePricingSection[]
  pageSections    PageSection[]

  @@map("pages")
}

model HeroSection {
  id                        Int           @id @default(autoincrement())
  name                      String        @default("Untitled Hero Section")
  layoutType                String        @default("split")
  sectionHeight             String        @default("100vh")
  tagline                   String?
  headline                  String
  subheading                String?
  textAlignment             String        @default("left")
  ctaPrimaryId              Int?
  ctaSecondaryId            Int?
  mediaUrl                  String?
  mediaType                 String        @default("image")
  mediaAlt                  String?
  mediaHeight               String        @default("80vh")
  mediaPosition             String        @default("right")
  backgroundType            String        @default("color")
  backgroundValue           String        @default("#FFFFFF")
  taglineColor              String        @default("#5243E9")
  headlineColor             String        @default("#1F2937")
  subheadingColor           String        @default("#6B7280")
  ctaPrimaryBgColor         String        @default("#5243E9")
  ctaPrimaryTextColor       String        @default("#FFFFFF")
  ctaSecondaryBgColor       String        @default("transparent")
  ctaSecondaryTextColor     String        @default("#5243E9")
  showTypingEffect          Boolean       @default(false)
  enableBackgroundAnimation Boolean       @default(false)
  customClasses             String?
  paddingTop                Int           @default(80)
  paddingBottom             Int           @default(80)
  containerMaxWidth         String        @default("2xl")
  visible                   Boolean       @default(true)
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  ctaSecondary              CTA?          @relation("HeroSecondaryCTA", fields: [ctaSecondaryId], references: [id])
  ctaPrimary                CTA?          @relation("HeroPrimaryCTA", fields: [ctaPrimaryId], references: [id])
  pageSections              PageSection[]

  @@map("hero_sections")
}

model Feature {
  id         Int      @id @default(autoincrement())
  pageId     Int
  iconUrl    String?
  heading    String
  subheading String?
  position   Int      @default(0)
  visible    Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  page       Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("features")
}

model MediaSection {
  id                      Int                   @id @default(autoincrement())
  position                Int                   @default(0)
  layoutType              String                @default("media_right")
  badgeText               String?
  badgeColor              String                @default("#5243E9")
  headline                String
  subheading              String?
  alignment               String                @default("left")
  mediaType               String                @default("image")
  mediaUrl                String?
  mediaAlt                String?
  mediaSize               String                @default("md")
  mediaPosition           String                @default("right")
  showBadge               Boolean               @default(true)
  showCtaButton           Boolean               @default(false)
  ctaText                 String?
  ctaUrl                  String?
  ctaStyle                String                @default("primary")
  enableScrollAnimations  Boolean               @default(false)
  animationType           String                @default("none")
  backgroundStyle         String                @default("solid")
  backgroundColor         String                @default("#F6F8FC")
  textColor               String                @default("#0F1A2A")
  paddingTop              Int                   @default(80)
  paddingBottom           Int                   @default(80)
  containerMaxWidth       String                @default("2xl")
  isActive                Boolean               @default(true)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  features                MediaSectionFeature[]
  pageSections            PageSection[]

  @@map("media_sections")
}

model MediaSectionFeature {
  id             Int          @id @default(autoincrement())
  mediaSectionId Int
  icon           String       @default("MessageSquare")
  label          String
  color          String       @default("#5243E9")
  sortOrder      Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  mediaSection   MediaSection @relation(fields: [mediaSectionId], references: [id], onDelete: Cascade)

  @@map("media_section_features")
}

model Menu {
  id            Int                @id @default(autoincrement())
  name          String
  description   String?
  isActive      Boolean            @default(true)
  sortOrder     Int                @default(0)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  headerConfigs HeaderConfigMenu[]
  items         MenuItem[]
}

model MenuItem {
  id        Int        @id @default(autoincrement())
  menuId    Int
  label     String
  url       String?
  icon      String?
  target    String     @default("_self")
  isActive  Boolean    @default(true)
  sortOrder Int        @default(0)
  parentId  Int?
  pageId    Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  menu      Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  page      Page?      @relation(fields: [pageId], references: [id])
  parent    MenuItem?  @relation("MenuItemHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  MenuItem[] @relation("MenuItemHierarchy")
}

model HeaderConfigMenu {
  id             Int          @id @default(autoincrement())
  headerConfigId Int
  menuId         Int
  sortOrder      Int          @default(0)
  isVisible      Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  menu           Menu         @relation(fields: [menuId], references: [id], onDelete: Cascade)
  headerConfig   HeaderConfig @relation(fields: [headerConfigId], references: [id], onDelete: Cascade)

  @@unique([headerConfigId, menuId])
}

model HeaderNavItem {
  id             Int          @id @default(autoincrement())
  headerConfigId Int
  pageId         Int?
  label          String
  customText     String?
  customUrl      String?
  sortOrder      Int          @default(0)
  isVisible      Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  page           Page?        @relation(fields: [pageId], references: [id], onDelete: Cascade)
  headerConfig   HeaderConfig @relation(fields: [headerConfigId], references: [id], onDelete: Cascade)

  @@map("header_nav_items")
}

model HeaderConfig {
  id              Int                @id @default(autoincrement())
  logoUrl         String?
  logoAlt         String?
  isActive        Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  backgroundColor String?            @default("#ffffff")
  menuActiveColor String?            @default("#5243E9")
  menuHoverColor  String?            @default("#5243E9")
  menuTextColor   String?            @default("#374151")
  menus           HeaderConfigMenu[]
  headerCTAs      HeaderCTA[]
  navItems        HeaderNavItem[]

  @@map("header_config")
}

model CTA {
  id                Int            @id @default(autoincrement())
  text              String
  url               String
  icon              String?
  style             String         @default("primary")
  target            String         @default("_self")
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  headerCTAs        HeaderCTA[]
  heroSecondary     HeroSection[]  @relation("HeroSecondaryCTA")
  heroPrimary       HeroSection[]  @relation("HeroPrimaryCTA")
  homeHeroSecondary HomePageHero[] @relation("HomeHeroSecondaryCTA")
  homeHeroPrimary   HomePageHero[] @relation("HomeHeroPrimaryCTA")

  @@map("ctas")
}

model HeaderCTA {
  id             Int          @id @default(autoincrement())
  headerConfigId Int
  ctaId          Int
  sortOrder      Int          @default(0)
  isVisible      Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  cta            CTA          @relation(fields: [ctaId], references: [id], onDelete: Cascade)
  headerConfig   HeaderConfig @relation(fields: [headerConfigId], references: [id], onDelete: Cascade)

  @@map("header_ctas")
}

model HomePageHero {
  id               Int      @id @default(autoincrement())
  tagline          String?
  headline         String
  subheading       String?
  ctaPrimaryId     Int?
  ctaSecondaryId   Int?
  ctaPrimaryText   String?
  ctaPrimaryUrl    String?
  ctaSecondaryText String?
  ctaSecondaryUrl  String?
  mediaUrl         String?
  backgroundColor  String?  @default("#FFFFFF")
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  ctaSecondary     CTA?     @relation("HomeHeroSecondaryCTA", fields: [ctaSecondaryId], references: [id])
  ctaPrimary       CTA?     @relation("HomeHeroPrimaryCTA", fields: [ctaPrimaryId], references: [id])

  @@map("home_page_hero")
}

model TrustIndicator {
  id        Int      @id @default(autoincrement())
  name      String
  logoUrl   String
  url       String?
  position  Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("trust_indicators")
}

model GlobalFeature {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?
  iconUrl           String?
  category          String?
  isActive          Boolean            @default(true)
  sortOrder         Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  featureGroupItems FeatureGroupItem[]

  @@map("global_features")
}

model FeatureGroup {
  id           Int                @id @default(autoincrement())
  name         String
  description  String?
  layoutType   String             @default("grid")
  sortOrder    Int                @default(0)
  isActive     Boolean            @default(true)
  backgroundColor String?         @default("#FFFFFF")
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  items        FeatureGroupItem[]
  pageGroups   PageFeatureGroup[]
  pageSections PageSection[]

  @@map("feature_groups")
}

model FeatureGroupItem {
  id             Int           @id @default(autoincrement())
  featureGroupId Int
  featureId      Int
  sortOrder      Int           @default(0)
  isVisible      Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  feature        GlobalFeature @relation(fields: [featureId], references: [id], onDelete: Cascade)
  featureGroup   FeatureGroup  @relation(fields: [featureGroupId], references: [id], onDelete: Cascade)

  @@unique([featureGroupId, featureId])
  @@map("feature_group_items")
}

model PageFeatureGroup {
  id             Int          @id @default(autoincrement())
  pageId         Int
  featureGroupId Int
  sortOrder      Int          @default(0)
  isVisible      Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  featureGroup   FeatureGroup @relation(fields: [featureGroupId], references: [id], onDelete: Cascade)
  page           Page         @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([pageId, featureGroupId])
  @@map("page_feature_groups")
}

model PageSection {
  id               Int             @id @default(autoincrement())
  pageId           Int
  sectionType      String
  title            String?
  subtitle         String?
  content          String?
  sortOrder        Int             @default(0)
  isVisible        Boolean         @default(true)
  heroSectionId    Int?
  featureGroupId   Int?
  mediaSectionId   Int?
  pricingSectionId Int?
  faqSectionId     Int?
  faqCategoryId    Int?
  contactSectionId Int?
  formId           Int?
  htmlSectionId    Int?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  htmlSection      HtmlSection?    @relation(fields: [htmlSectionId], references: [id])
  form             Form?           @relation(fields: [formId], references: [id])
  contactSection   ContactSection? @relation(fields: [contactSectionId], references: [id])
  faqCategory      FAQCategory?    @relation(fields: [faqCategoryId], references: [id])
  faqSection       FAQSection?     @relation(fields: [faqSectionId], references: [id])
  pricingSection   PricingSection? @relation(fields: [pricingSectionId], references: [id])
  mediaSection     MediaSection?   @relation(fields: [mediaSectionId], references: [id])
  featureGroup     FeatureGroup?   @relation(fields: [featureGroupId], references: [id])
  heroSection      HeroSection?    @relation(fields: [heroSectionId], references: [id])
  page             Page            @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("page_sections")
}

model SectionTemplate {
  id          Int      @id @default(autoincrement())
  name        String
  sectionType String
  description String?
  thumbnail   String?
  content     String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("section_templates")
}

model Testimonial {
  id         Int      @id @default(autoincrement())
  name       String
  title      String?
  company    String?
  content    String
  rating     Int?
  avatarUrl  String?
  logoUrl    String?
  isActive   Boolean  @default(true)
  isFeatured Boolean  @default(false)
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("testimonials")
}

model FAQCategory {
  id                Int                  @id @default(autoincrement())
  name              String
  description       String?
  icon              String?
  color             String               @default("#5243E9")
  sortOrder         Int                  @default(0)
  isActive          Boolean              @default(true)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  sectionCategories FAQSectionCategory[]
  faqs              FAQ[]
  pageSections      PageSection[]

  @@map("faq_categories")
}

model FAQ {
  id         Int          @id @default(autoincrement())
  categoryId Int?
  question   String
  answer     String
  isActive   Boolean      @default(true)
  sortOrder  Int          @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  category   FAQCategory? @relation(fields: [categoryId], references: [id])

  @@map("faqs")
}

model FAQSection {
  id                  Int                  @id @default(autoincrement())
  name                String               @unique
  heading             String
  subheading          String?
  heroTitle           String
  heroSubtitle        String?
  searchPlaceholder   String               @default("Enter your keyword here")
  showHero            Boolean              @default(true)
  showCategories      Boolean              @default(true)
  backgroundColor     String               @default("#f8fafc")
  heroBackgroundColor String               @default("#6366f1")
  heroHeight          String               @default("80vh")
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  sectionCategories   FAQSectionCategory[]
  pageSections        PageSection[]

  @@map("faq_sections")
}

model FAQSectionCategory {
  id           Int         @id @default(autoincrement())
  faqSectionId Int
  categoryId   Int
  sortOrder    Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  category     FAQCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  faqSection   FAQSection  @relation(fields: [faqSectionId], references: [id], onDelete: Cascade)

  @@unique([faqSectionId, categoryId])
  @@map("faq_section_categories")
}

model ContactSection {
  id             Int                   @id @default(autoincrement())
  name           String
  heading        String
  subheading     String?
  successMessage String                @default("Thank you for your message! We'll get back to you soon.")
  errorMessage   String                @default("Sorry, there was an error sending your message. Please try again.")
  isActive       Boolean               @default(true)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  emailSettings  ContactEmailSettings?
  fields         ContactField[]
  submissions    ContactSubmission[]
  pageSections   PageSection[]

  @@map("contact_sections")
}

model ContactField {
  id               Int            @id @default(autoincrement())
  contactSectionId Int
  fieldType        String
  fieldName        String
  label            String
  placeholder      String?
  helpText         String?
  isRequired       Boolean        @default(false)
  isVisible        Boolean        @default(true)
  sortOrder        Int            @default(0)
  fieldOptions     String?
  fieldWidth       String         @default("full")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  contactSection   ContactSection @relation(fields: [contactSectionId], references: [id], onDelete: Cascade)

  @@map("contact_fields")
}

model ContactEmailSettings {
  id                  Int            @id @default(autoincrement())
  contactSectionId    Int            @unique
  smtpHost            String
  smtpPort            Int            @default(587)
  smtpUsername        String
  smtpPassword        String
  smtpSecure          Boolean        @default(true)
  fromEmail           String
  fromName            String
  toEmail             String
  ccEmail             String?
  bccEmail            String?
  replyToEmail        String?
  emailSubject        String         @default("New Contact Form Submission")
  emailTemplate       String?
  autoRespond         Boolean        @default(false)
  autoRespondSubject  String?
  autoRespondTemplate String?
  isActive            Boolean        @default(true)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  contactSection      ContactSection @relation(fields: [contactSectionId], references: [id], onDelete: Cascade)

  @@map("contact_email_settings")
}

model ContactSubmission {
  id               Int            @id @default(autoincrement())
  contactSectionId Int
  formData         String
  ipAddress        String?
  userAgent        String?
  referrer         String?
  isRead           Boolean        @default(false)
  isSpam           Boolean        @default(false)
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  contactSection   ContactSection @relation(fields: [contactSectionId], references: [id], onDelete: Cascade)

  @@map("contact_submissions")
}

model Plan {
  id            String               @id @default(uuid())
  name          String
  description   String?
  ctaText       String?              @default("Get Started")
  position      Int                  @default(0)
  isActive      Boolean              @default(true)
  isPopular     Boolean              @default(false)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  basicFeatures PlanBasicFeature[]
  featureLimits PlanFeatureLimit[]
  features      PlanFeature[]
  pricing       PlanPricing[]
  sectionPlans  PricingSectionPlan[]

  @@map("plans")
}

model BillingCycle {
  id         String        @id @default(uuid())
  label      String
  multiplier Float
  isDefault  Boolean       @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  pricing    PlanPricing[]

  @@map("billing_cycles")
}

model PlanPricing {
  id             String       @id @default(uuid())
  planId         String
  billingCycleId String
  priceCents     Int
  stripePriceId  String?
  ctaUrl         String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  billingCycle   BillingCycle @relation(fields: [billingCycleId], references: [id], onDelete: Cascade)
  plan           Plan         @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([planId, billingCycleId])
  @@map("plan_pricing")
}

model PlanFeatureType {
  id          String             @id @default(uuid())
  name        String
  unit        String?
  description String?
  icon        String?
  iconUrl     String?
  dataType    String             @default("number")
  sortOrder   Int                @default(0)
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  limits      PlanFeatureLimit[]

  @@map("plan_feature_types")
}

model PlanFeatureLimit {
  id            String          @id @default(uuid())
  planId        String
  featureTypeId String
  value         String
  isUnlimited   Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  featureType   PlanFeatureType @relation(fields: [featureTypeId], references: [id], onDelete: Cascade)
  plan          Plan            @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([planId, featureTypeId])
  @@map("plan_feature_limits")
}

model SharedFeature {
  id        String        @id @default(uuid())
  name      String
  icon      String?
  category  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  usedIn    PlanFeature[]

  @@map("shared_features")
}

model PlanFeature {
  id        String         @id @default(uuid())
  planId    String
  featureId String?
  available Boolean        @default(true)
  label     String?
  icon      String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  feature   SharedFeature? @relation(fields: [featureId], references: [id])
  plan      Plan           @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("plan_features")
}

model MediaLibrary {
  id           Int          @id @default(autoincrement())
  filename     String
  title        String?
  description  String?
  alt          String?
  fileType     String
  mimeType     String
  fileSize     Int
  width        Int?
  height       Int?
  duration     Float?
  originalUrl  String
  localPath    String?
  publicUrl    String
  thumbnailUrl String?
  folderId     Int?
  tags         String?
  uploadSource String       @default("upload")
  uploadedBy   String?
  isActive     Boolean      @default(true)
  isPublic     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  folder       MediaFolder? @relation(fields: [folderId], references: [id])
  usages       MediaUsage[]

  @@map("media_library")
}

model MediaFolder {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  parentId    Int?
  color       String         @default("#5243E9")
  sortOrder   Int            @default(0)
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  parent      MediaFolder?   @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    MediaFolder[]  @relation("FolderHierarchy")
  media       MediaLibrary[]

  @@map("media_folders")
}

model MediaUsage {
  id         Int          @id @default(autoincrement())
  mediaId    Int
  entityType String
  entityId   Int
  fieldName  String
  createdAt  DateTime     @default(now())
  media      MediaLibrary @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([mediaId, entityType, entityId, fieldName])
  @@map("media_usage")
}

model BasicFeature {
  id              String             @id @default(uuid())
  name            String
  description     String?
  sortOrder       Int                @default(0)
  isActive        Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  planAssignments PlanBasicFeature[]

  @@map("basic_features")
}

model PlanBasicFeature {
  id             String       @id @default(uuid())
  planId         String
  basicFeatureId String
  createdAt      DateTime     @default(now())
  basicFeature   BasicFeature @relation(fields: [basicFeatureId], references: [id], onDelete: Cascade)
  plan           Plan         @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([planId, basicFeatureId])
  @@map("plan_basic_features")
}

model PricingSection {
  id                             Int                  @id @default(autoincrement())
  name                           String
  heading                        String
  subheading                     String?
  layoutType                     String               @default("standard")
  pricingCardsBackgroundColor    String?              @default("#FFFFFF")
  comparisonTableBackgroundColor String?              @default("#F9FAFB")
  isActive                       Boolean              @default(true)
  createdAt                      DateTime             @default(now())
  updatedAt                      DateTime             @updatedAt
  pageAssignments                PagePricingSection[]
  pageSections                   PageSection[]
  sectionPlans                   PricingSectionPlan[]

  @@map("pricing_sections")
}

model PricingSectionPlan {
  id               Int            @id @default(autoincrement())
  pricingSectionId Int
  planId           String
  sortOrder        Int            @default(0)
  isVisible        Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  plan             Plan           @relation(fields: [planId], references: [id], onDelete: Cascade)
  pricingSection   PricingSection @relation(fields: [pricingSectionId], references: [id], onDelete: Cascade)

  @@unique([pricingSectionId, planId])
  @@map("pricing_section_plans")
}

model PagePricingSection {
  id               Int            @id @default(autoincrement())
  pageId           Int
  pricingSectionId Int
  sortOrder        Int            @default(0)
  isVisible        Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  pricingSection   PricingSection @relation(fields: [pricingSectionId], references: [id], onDelete: Cascade)
  page             Page           @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([pageId, pricingSectionId])
  @@map("page_pricing_sections")
}

model Form {
  id                      Int              @id @default(autoincrement())
  name                    String
  title                   String
  subheading              String?
  successMessage          String           @default("Thank you! Your message has been sent successfully.")
  errorMessage            String           @default("Sorry, there was an error. Please try again.")
  ctaText                 String           @default("Send Message")
  ctaIcon                 String?
  ctaStyle                String           @default("primary")
  ctaSize                 String           @default("large")
  ctaWidth                String           @default("auto")
  ctaLoadingText          String           @default("Sending...")
  ctaBackgroundColor      String?
  ctaTextColor            String?
  ctaBorderColor          String?
  ctaHoverBackgroundColor String?
  ctaHoverTextColor       String?
  redirectUrl             String?
  emailNotification       Boolean          @default(false)
  emailRecipients         String?
  dynamicEmailRecipients  Boolean          @default(false)
  emailFieldRecipients    String?
  sendToSubmitterEmail    Boolean          @default(false)
  submitterEmailField     String?
  adminEmailSubject       String           @default("New Form Submission")
  adminEmailTemplate      String           @default("You have received a new form submission.\n\n{{FORM_DATA}}\n\nSubmitted at: {{SUBMITTED_AT}}")
  submitterEmailSubject   String           @default("Thank you for your submission")
  submitterEmailTemplate  String           @default("Dear {{SUBMITTER_NAME}},\n\nThank you for contacting us! We have received your message and will get back to you soon.\n\nBest regards,\nThe Team")
  webhookUrl              String?
  enableCaptcha           Boolean          @default(true)
  captchaType             String           @default("math")
  captchaDifficulty       String           @default("medium")
  showContactInfo         Boolean          @default(false)
  contactPosition         String           @default("right")
  contactPhone            String?
  contactEmail            String?
  contactAddress          String?
  socialFacebook          String?
  socialTwitter           String?
  socialLinkedin          String?
  socialInstagram         String?
  socialYoutube           String?
  contactHeading          String           @default("Get in Touch")
  contactSubheading       String           @default("We'd love to hear from you. Here's how you can reach us.")
  contactPhoneLabel       String           @default("Phone")
  contactEmailLabel       String           @default("Email")
  contactAddressLabel     String           @default("Address")
  contactSocialLabel      String           @default("Follow Us")
  formBackgroundColor     String?
  formBorderColor         String           @default("transparent")
  formTextColor           String?
  fieldBackgroundColor    String?
  fieldBorderColor        String?
  fieldTextColor          String?
  sectionBackgroundColor  String?
  isActive                Boolean          @default(true)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  fields                  FormField[]
  submissions             FormSubmission[]
  pageSections            PageSection[]

  @@map("forms")
}

model FormField {
  id           Int      @id @default(autoincrement())
  formId       Int
  fieldType    String
  fieldName    String
  label        String
  placeholder  String?
  helpText     String?
  isRequired   Boolean  @default(false)
  isVisible    Boolean  @default(true)
  sortOrder    Int      @default(0)
  fieldOptions String?
  fieldWidth   String   @default("full")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("form_fields")
}

model FormSubmission {
  id              Int       @id @default(autoincrement())
  formId          Int
  formData        String
  ipAddress       String?
  userAgent       String?
  referrer        String?
  isRead          Boolean   @default(false)
  isSpam          Boolean   @default(false)
  notes           String?
  emailStatus     String    @default("not_configured")
  emailMessageId  String?
  emailRecipients String?
  emailSubject    String?
  emailSentAt     DateTime?
  emailError      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  form            Form      @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("form_submissions")
}

model HtmlSection {
  id               Int               @id @default(autoincrement())
  name             String
  description      String?
  htmlContent      String
  cssContent       String?
  jsContent        String?
  isActive         Boolean           @default(true)
  sortOrder        Int               @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  pageHtmlSections PageHtmlSection[]
  pageSections     PageSection[]

  @@map("html_sections")
}

model PageHtmlSection {
  id            Int         @id @default(autoincrement())
  pageId        Int
  htmlSectionId Int
  sortOrder     Int         @default(0)
  isVisible     Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  htmlSection   HtmlSection @relation(fields: [htmlSectionId], references: [id], onDelete: Cascade)
  page          Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([pageId, htmlSectionId])
  @@map("page_html_sections")
}
