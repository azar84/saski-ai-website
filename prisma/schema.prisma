generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model SiteSettings {
  id         Int      @id @default(autoincrement())
  logoUrl    String?
  faviconUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("site_settings")
}

model DesignSystem {
  id                    Int      @id @default(autoincrement())
  
  // Brand Colors
  primaryColor          String   @default("#5243E9")     // Main brand color
  primaryColorLight     String   @default("#6366F1")     // Lighter variant
  primaryColorDark      String   @default("#4338CA")     // Darker variant
  secondaryColor        String   @default("#7C3AED")     // Secondary brand color
  accentColor           String   @default("#06B6D4")     // Accent/highlight color
  
  // Semantic Colors
  successColor          String   @default("#10B981")     // Success states
  warningColor          String   @default("#F59E0B")     // Warning states
  errorColor            String   @default("#EF4444")     // Error states
  infoColor             String   @default("#3B82F6")     // Info states
  
  // Neutral Colors
  grayLight             String   @default("#F9FAFB")     // Light gray
  grayMedium            String   @default("#6B7280")     // Medium gray
  grayDark              String   @default("#374151")     // Dark gray
  
  // Background Colors
  backgroundPrimary     String   @default("#FFFFFF")     // Main background
  backgroundSecondary   String   @default("#F6F8FC")     // Secondary background
  backgroundDark        String   @default("#0F1A2A")     // Dark theme background
  
  // Text Colors
  textPrimary           String   @default("#1F2937")     // Primary text
  textSecondary         String   @default("#6B7280")     // Secondary text
  textMuted             String   @default("#9CA3AF")     // Muted text
  
  // Typography
  fontFamily            String   @default("Manrope")     // Primary font family
  fontFamilyMono        String   @default("ui-monospace") // Monospace font
  fontSizeBase          String   @default("16px")        // Base font size
  lineHeightBase        String   @default("1.5")         // Base line height
  fontWeightNormal      String   @default("400")         // Normal weight
  fontWeightMedium      String   @default("500")         // Medium weight
  fontWeightBold        String   @default("700")         // Bold weight
  
  // Spacing Scale
  spacingXs             String   @default("4px")         // Extra small
  spacingSm             String   @default("8px")         // Small
  spacingMd             String   @default("16px")        // Medium
  spacingLg             String   @default("24px")        // Large
  spacingXl             String   @default("32px")        // Extra large
  spacing2xl            String   @default("48px")        // 2X large
  
  // Border Radius
  borderRadiusSm        String   @default("4px")         // Small radius
  borderRadiusMd        String   @default("8px")         // Medium radius
  borderRadiusLg        String   @default("12px")        // Large radius
  borderRadiusXl        String   @default("16px")        // Extra large radius
  borderRadiusFull      String   @default("9999px")      // Full radius (pills)
  
  // Shadows
  shadowSm              String   @default("0 1px 2px 0 rgb(0 0 0 / 0.05)")
  shadowMd              String   @default("0 4px 6px -1px rgb(0 0 0 / 0.1)")
  shadowLg              String   @default("0 10px 15px -3px rgb(0 0 0 / 0.1)")
  shadowXl              String   @default("0 20px 25px -5px rgb(0 0 0 / 0.1)")
  
  // Animation Durations
  animationFast         String   @default("150ms")       // Fast animations
  animationNormal       String   @default("300ms")       // Normal animations
  animationSlow         String   @default("500ms")       // Slow animations
  
  // Breakpoints
  breakpointSm          String   @default("640px")       // Small devices
  breakpointMd          String   @default("768px")       // Medium devices
  breakpointLg          String   @default("1024px")      // Large devices
  breakpointXl          String   @default("1280px")      // Extra large devices
  breakpoint2xl         String   @default("1536px")      // 2X large devices
  
  // Theme Mode
  themeMode             String   @default("light")       // light, dark, auto
  
  // Custom CSS Variables (JSON string for additional variables)
  customVariables       String?                          // JSON string of custom CSS variables
  
  // Meta
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("design_system")
}

model Page {
  id               Int                @id @default(autoincrement())
  slug             String             @unique
  title            String
  metaTitle        String?
  metaDesc         String?
  sortOrder        Int                @default(0)
  showInHeader     Boolean            @default(false)
  showInFooter     Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  features         Feature[]
  headerNavItems   HeaderNavItem[]
  featureGroups    PageFeatureGroup[]
  pageSections     PageSection[]

  @@map("pages")
}

model HeroSection {
  id                          Int           @id @default(autoincrement())
  layoutType                  String        @default("split") // split, centered, overlay
  tagline                     String?       // Optional badge or label
  headline                    String        // Main title
  subheading                  String?       // Supporting text
  textAlignment               String        @default("left") // left, center, right
  
  // CTA References
  ctaPrimaryId                Int?          // FK to ctas(id)
  ctaSecondaryId              Int?          // FK to ctas(id)
  
  // Media + Background
  mediaUrl                    String?       // Path or embed
  mediaType                   String        @default("image") // image, video, animation, 3d
  mediaAlt                    String?       // Alt text
  mediaHeight                 String        @default("80vh") // Media height (e.g., "80vh", "500px", "auto")
  mediaPosition               String        @default("right") // left, right
  backgroundType              String        @default("color") // color, gradient, image, video
  backgroundValue             String        @default("#FFFFFF") // HEX, gradient, or asset path
  
  // Text Colors
  taglineColor                String        @default("#5243E9") // Tagline text color
  headlineColor               String        @default("#1F2937") // Headline text color
  subheadingColor             String        @default("#6B7280") // Subheading text color
  
  // CTA Styling
  ctaPrimaryBgColor           String        @default("#5243E9") // Primary CTA background color
  ctaPrimaryTextColor         String        @default("#FFFFFF") // Primary CTA text color
  ctaSecondaryBgColor         String        @default("transparent") // Secondary CTA background color
  ctaSecondaryTextColor       String        @default("#5243E9") // Secondary CTA text color
  
  // Advanced
  showTypingEffect            Boolean       @default(false) // Animate headline
  enableBackgroundAnimation   Boolean       @default(false) // Sun/Moon, sparkles, etc.
  customClasses               String?       // Tailwind or utility class overrides
  paddingTop                  Int           @default(80) // In px
  paddingBottom               Int           @default(80) // In px
  containerMaxWidth           String        @default("2xl") // xl, 2xl, full
  
  visible                     Boolean       @default(true)
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
  
  // Relations
  ctaPrimary                  CTA?          @relation("HeroPrimaryCTA", fields: [ctaPrimaryId], references: [id], onDelete: SetNull)
  ctaSecondary                CTA?          @relation("HeroSecondaryCTA", fields: [ctaSecondaryId], references: [id], onDelete: SetNull)
  pageSections                PageSection[] // Page builder references

  @@map("hero_sections")
}

model Feature {
  id         Int      @id @default(autoincrement())
  pageId     Int
  iconUrl    String?
  heading    String
  subheading String?
  position   Int      @default(0)
  visible    Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  page       Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("features")
}

model MediaSection {
  id                       Int                     @id @default(autoincrement())
  position                 Int                     @default(0) // Determines order on the page
  layoutType               String                  @default("media_right") // media_left, media_right, stacked
  badgeText                String?                 // Text above headline
  badgeColor               String                  @default("#5243E9") // HEX color
  headline                 String                  // Section title
  subheading               String?                 // Supporting paragraph
  alignment                String                  @default("left") // left, center, right
  mediaType                String                  @default("image") // image, video, animation, 3d
  mediaUrl                 String                  // Path or embed URL
  mediaAlt                 String?                 // Alt text for accessibility
  mediaSize                String                  @default("md") // sm, md, lg, full
  mediaPosition            String                  @default("right") // left, right
  showBadge                Boolean                 @default(true) // Show/hide badge
  showCtaButton            Boolean                 @default(false) // Show/hide CTA button
  ctaText                  String?                 // CTA button text
  ctaUrl                   String?                 // Link target
  ctaStyle                 String                  @default("primary") // primary, secondary, link
  enableScrollAnimations   Boolean                 @default(false) // Trigger scroll-based animations
  animationType            String                  @default("none") // fade, slide, zoom, none
  backgroundStyle          String                  @default("solid") // solid, gradient, radial, none
  backgroundColor          String                  @default("#F6F8FC") // HEX color
  textColor                String                  @default("#0F1A2A") // HEX color
  paddingTop               Int                     @default(80) // Top padding in px
  paddingBottom            Int                     @default(80) // Bottom padding in px
  containerMaxWidth        String                  @default("2xl") // xl, 2xl, full
  isActive                 Boolean                 @default(true)
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  features                 MediaSectionFeature[]   // One-to-many relationship
  pageSections             PageSection[]           // Page builder references

  @@map("media_sections")
}

model MediaSectionFeature {
  id              Int          @id @default(autoincrement())
  mediaSectionId  Int
  icon            String       // Icon name from icon library
  label           String       // Feature text
  color           String       @default("#5243E9") // HEX color
  sortOrder       Int          @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  mediaSection    MediaSection @relation(fields: [mediaSectionId], references: [id], onDelete: Cascade)

  @@map("media_section_features")
}

model HeaderConfig {
  id          Int             @id @default(autoincrement())
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  navItems    HeaderNavItem[]
  ctaButtons  HeaderCTA[]

  @@map("header_config")
}

model HeaderNavItem {
  id             Int          @id @default(autoincrement())
  headerConfigId Int
  pageId         Int?         // Optional - can be null for custom links
  customText     String?      // Custom text for non-page links
  customUrl      String?      // Custom URL for non-page links
  sortOrder      Int          @default(0)
  isVisible      Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  headerConfig   HeaderConfig @relation(fields: [headerConfigId], references: [id], onDelete: Cascade)
  page           Page?        @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("header_nav_items")
}

model CTA {
  id                    Int                 @id @default(autoincrement())
  text                  String              // Button text
  url                   String              // Button URL/link
  icon                  String?             // Optional Lucide icon name (e.g., "ArrowRight", "ExternalLink")
  style                 String              @default("primary") // primary, secondary, outline, ghost
  target                String              @default("_self") // _self, _blank
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  headerCTAs            HeaderCTA[]
  homeHeroPrimary       HomePageHero[]      @relation("PrimaryCTA")
  homeHeroSecondary     HomePageHero[]      @relation("SecondaryCTA")
  heroPrimary           HeroSection[]       @relation("HeroPrimaryCTA")
  heroSecondary         HeroSection[]       @relation("HeroSecondaryCTA")

  @@map("cta_buttons")
}

model HeaderCTA {
  id             Int          @id @default(autoincrement())
  headerConfigId Int
  ctaId          Int
  sortOrder      Int          @default(0)
  isVisible      Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  headerConfig   HeaderConfig @relation(fields: [headerConfigId], references: [id], onDelete: Cascade)
  cta            CTA          @relation(fields: [ctaId], references: [id], onDelete: Cascade)

  @@map("header_cta_items")
}

model HomePageHero {
  id                    Int                     @id @default(autoincrement())
  heading               String                  @default("Automate Conversations, Capture Leads, Serve Customers — All Without Code")
  subheading            String                  @default("Deploy intelligent assistants to SMS, WhatsApp, and your website in minutes. Transform customer support while you focus on growth.")
  primaryCtaId          Int?                    // Reference to CTA button
  secondaryCtaId        Int?                    // Reference to CTA button
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  trustIndicators       TrustIndicator[]
  primaryCta            CTA?                    @relation("PrimaryCTA", fields: [primaryCtaId], references: [id], onDelete: SetNull)
  secondaryCta          CTA?                    @relation("SecondaryCTA", fields: [secondaryCtaId], references: [id], onDelete: SetNull)

  @@map("home_page_hero")
}

model TrustIndicator {
  id              Int            @id @default(autoincrement())
  homePageHeroId  Int
  iconName        String         // Icon name from Lucide React (e.g., "Shield", "Clock", "Code")
  text            String         // Display text (e.g., "99.9% Uptime")
  sortOrder       Int            @default(0)
  isVisible       Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  homePageHero    HomePageHero   @relation(fields: [homePageHeroId], references: [id], onDelete: Cascade)

  @@map("trust_indicators")
}

model GlobalFeature {
  id          Int                 @id @default(autoincrement())
  title       String              // Feature title (e.g., "Multi-Channel Support")
  description String              // Feature description
  iconName    String              // Icon name from Lucide React (e.g., "MessageSquare", "Users")
  category    String              @default("integration") // Category: integration, ai, automation, analytics, security, support
  sortOrder   Int                 @default(0)
  isVisible   Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  groupItems  FeatureGroupItem[]  // Features can be in multiple groups

  @@map("global_features")
}

model FeatureGroup {
  id              Int                   @id @default(autoincrement())
  name            String                // Group name (e.g., "Home Page Features", "About Page Features")
  heading         String                // Display heading (e.g., "Why Saski AI?")
  subheading      String?               // Display subheading (e.g., "Simple. Smart. Built for growing businesses")
  isActive        Boolean               @default(true)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  groupItems      FeatureGroupItem[]    // Features in this group
  pageAssignments PageFeatureGroup[]    // Pages that use this group
  pageSections    PageSection[]         // Page builder references

  @@map("feature_groups")
}

model FeatureGroupItem {
  id             Int            @id @default(autoincrement())
  featureGroupId Int
  featureId      Int
  sortOrder      Int            @default(0)
  isVisible      Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  featureGroup   FeatureGroup   @relation(fields: [featureGroupId], references: [id], onDelete: Cascade)
  feature        GlobalFeature  @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([featureGroupId, featureId])
  @@map("feature_group_items")
}

model PageFeatureGroup {
  id             Int          @id @default(autoincrement())
  pageId         Int
  featureGroupId Int
  sortOrder      Int          @default(0)
  isVisible      Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  page           Page         @relation(fields: [pageId], references: [id], onDelete: Cascade)
  featureGroup   FeatureGroup @relation(fields: [featureGroupId], references: [id], onDelete: Cascade)

  @@unique([pageId, featureGroupId])
  @@map("page_feature_groups")
}

// Page Builder System
model PageSection {
  id              Int           @id @default(autoincrement())
  pageId          Int
  sectionType     String        // hero, features, media, testimonials, pricing, faq, cta, custom
  title           String?       // Section title/heading (optional override)
  subtitle        String?       // Section subtitle/subheading (optional override)
  content         String?       // JSON content for the section
  sortOrder       Int           @default(0)
  isVisible       Boolean       @default(true)
  // References to existing content
  heroSectionId   Int?          // Reference to HeroSection
  featureGroupId  Int?          // Reference to FeatureGroup
  mediaSectionId  Int?          // Reference to MediaSection
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  page            Page          @relation(fields: [pageId], references: [id], onDelete: Cascade)
  heroSection     HeroSection?  @relation(fields: [heroSectionId], references: [id], onDelete: SetNull)
  featureGroup    FeatureGroup? @relation(fields: [featureGroupId], references: [id], onDelete: SetNull)
  mediaSection    MediaSection? @relation(fields: [mediaSectionId], references: [id], onDelete: SetNull)

  @@map("page_sections")
}

// Pre-built section templates
model SectionTemplate {
  id          Int       @id @default(autoincrement())
  name        String    // Template name (e.g., "Hero with Video", "Features Grid", "Testimonials Carousel")
  sectionType String    // hero, features, media, testimonials, pricing, faq, cta
  description String?   // Template description
  thumbnail   String?   // Template preview image URL
  content     String    // JSON template structure
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("section_templates")
}

// Testimonials system
model Testimonial {
  id          Int       @id @default(autoincrement())
  name        String    // Customer name
  title       String?   // Customer title/position
  company     String?   // Customer company
  content     String    // Testimonial content/quote
  rating      Int?      // Rating out of 5
  avatarUrl   String?   // Customer avatar image URL
  logoUrl     String?   // Company logo URL
  isActive    Boolean   @default(true)
  isFeatured  Boolean   @default(false)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("testimonials")
}

// FAQ system
model FAQ {
  id          Int       @id @default(autoincrement())
  question    String    // FAQ question
  answer      String    // FAQ answer
  category    String?   // FAQ category (e.g., "General", "Technical", "Billing")
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("faqs")
}

// Pricing system
model PricingPlan {
  id            Int      @id @default(autoincrement())
  name          String
  description   String
  price         Float
  currency      String   @default("USD")
  billingPeriod String   @default("monthly") // monthly, yearly
  features      String   // JSON array of features
  isPopular     Boolean  @default(false)
  isActive      Boolean  @default(true)
  sortOrder     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("pricing_plans")
}

// Media Library System
model MediaLibrary {
  id            Int      @id @default(autoincrement())
  filename      String   // Original filename
  title         String?  // User-defined title
  description   String?  // User-defined description
  alt           String?  // Alt text for accessibility
  fileType      String   // image, video, audio, document, etc.
  mimeType      String   // image/jpeg, video/mp4, etc.
  fileSize      Int      // File size in bytes
  width         Int?     // For images/videos
  height        Int?     // For images/videos
  duration      Float?   // For videos/audio in seconds
  
  // Storage information
  originalUrl   String   // Original source URL (if imported from URL)
  localPath     String?  // Local file path
  publicUrl     String   // Public accessible URL
  thumbnailUrl  String?  // Thumbnail/preview URL
  
  // Organization
  folderId      Int?     // Optional folder organization
  tags          String?  // JSON array of tags for searching
  
  // Upload metadata
  uploadSource  String   @default("upload") // upload, url_import, drag_drop
  uploadedBy    String?  // User identifier (future use)
  
  // Status and visibility
  isActive      Boolean  @default(true)
  isPublic      Boolean  @default(true)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  folder        MediaFolder? @relation(fields: [folderId], references: [id], onDelete: SetNull)
  usages        MediaUsage[]

  @@map("media_library")
}

model MediaFolder {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  parentId    Int?          // For nested folders
  color       String        @default("#5243E9") // Folder color for UI
  sortOrder   Int           @default(0)
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  parent      MediaFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children    MediaFolder[] @relation("FolderHierarchy")
  media       MediaLibrary[]

  @@map("media_folders")
}

model MediaUsage {
  id          Int          @id @default(autoincrement())
  mediaId     Int
  entityType  String       // hero_section, media_section, page, cta, etc.
  entityId    Int
  fieldName   String       // mediaUrl, backgroundImage, logoUrl, etc.
  createdAt   DateTime     @default(now())
  
  // Relations
  media       MediaLibrary @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  
  @@unique([mediaId, entityType, entityId, fieldName])
  @@map("media_usage")
}
