generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model SiteSettings {
  id         Int      @id @default(autoincrement())
  logoUrl    String?
  faviconUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("site_settings")
}

model Page {
  id               Int                  @id @default(autoincrement())
  slug             String               @unique
  title            String
  metaTitle        String?
  metaDesc         String?
  sortOrder        Int                  @default(0)
  showInHeader     Boolean              @default(true)
  showInFooter     Boolean              @default(false)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  features         Feature[]
  heroSections     HeroSection[]
  mediaSections    MediaSection[]
  headerNavItems   HeaderNavItem[]
  featureGroups    PageFeatureGroup[]   // Feature groups assigned to this page
  sections         PageSection[]        // Page builder sections

  @@map("pages")
}

model HeroSection {
  id           Int           @id @default(autoincrement())
  pageId       Int
  heading      String?
  subheading   String?
  imageUrl     String?
  visible      Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  page         Page          @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageSections PageSection[] // Page builder references

  @@map("hero_sections")
}

model Feature {
  id         Int      @id @default(autoincrement())
  pageId     Int
  iconUrl    String?
  heading    String
  subheading String?
  position   Int      @default(0)
  visible    Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  page       Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("features")
}

model MediaSection {
  id           Int           @id @default(autoincrement())
  pageId       Int
  heading      String?
  subheading   String?
  imageUrl     String?
  videoUrl     String?
  position     Int           @default(0)
  visible      Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  page         Page          @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageSections PageSection[] // Page builder references

  @@map("media_sections")
}

model HeaderConfig {
  id          Int             @id @default(autoincrement())
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  navItems    HeaderNavItem[]
  ctaButtons  HeaderCTA[]

  @@map("header_config")
}

model HeaderNavItem {
  id             Int          @id @default(autoincrement())
  headerConfigId Int
  pageId         Int?         // Optional - can be null for custom links
  customText     String?      // Custom text for non-page links
  customUrl      String?      // Custom URL for non-page links
  sortOrder      Int          @default(0)
  isVisible      Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  headerConfig   HeaderConfig @relation(fields: [headerConfigId], references: [id], onDelete: Cascade)
  page           Page?        @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("header_nav_items")
}

model CTA {
  id                    Int                 @id @default(autoincrement())
  text                  String              // Button text
  url                   String              // Button URL/link
  icon                  String?             // Optional Lucide icon name (e.g., "ArrowRight", "ExternalLink")
  style                 String              @default("primary") // primary, secondary, outline, ghost
  target                String              @default("_self") // _self, _blank
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  headerCTAs            HeaderCTA[]
  homeHeroPrimary       HomePageHero[]      @relation("PrimaryCTA")
  homeHeroSecondary     HomePageHero[]      @relation("SecondaryCTA")

  @@map("cta_buttons")
}

model HeaderCTA {
  id             Int          @id @default(autoincrement())
  headerConfigId Int
  ctaId          Int
  sortOrder      Int          @default(0)
  isVisible      Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  headerConfig   HeaderConfig @relation(fields: [headerConfigId], references: [id], onDelete: Cascade)
  cta            CTA          @relation(fields: [ctaId], references: [id], onDelete: Cascade)

  @@map("header_cta_items")
}

model HomePageHero {
  id                    Int                     @id @default(autoincrement())
  heading               String                  @default("Automate Conversations, Capture Leads, Serve Customers â€” All Without Code")
  subheading            String                  @default("Deploy intelligent assistants to SMS, WhatsApp, and your website in minutes. Transform customer support while you focus on growth.")
  primaryCtaId          Int?                    // Reference to CTA button
  secondaryCtaId        Int?                    // Reference to CTA button
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  trustIndicators       TrustIndicator[]
  primaryCta            CTA?                    @relation("PrimaryCTA", fields: [primaryCtaId], references: [id], onDelete: SetNull)
  secondaryCta          CTA?                    @relation("SecondaryCTA", fields: [secondaryCtaId], references: [id], onDelete: SetNull)

  @@map("home_page_hero")
}

model TrustIndicator {
  id              Int            @id @default(autoincrement())
  homePageHeroId  Int
  iconName        String         // Icon name from Lucide React (e.g., "Shield", "Clock", "Code")
  text            String         // Display text (e.g., "99.9% Uptime")
  sortOrder       Int            @default(0)
  isVisible       Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  homePageHero    HomePageHero   @relation(fields: [homePageHeroId], references: [id], onDelete: Cascade)

  @@map("trust_indicators")
}

model GlobalFeature {
  id          Int                 @id @default(autoincrement())
  title       String              // Feature title (e.g., "Multi-Channel Support")
  description String              // Feature description
  iconName    String              // Icon name from Lucide React (e.g., "MessageSquare", "Users")
  category    String              @default("integration") // Category: integration, ai, automation, analytics, security, support
  sortOrder   Int                 @default(0)
  isVisible   Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  groupItems  FeatureGroupItem[]  // Features can be in multiple groups

  @@map("global_features")
}

model FeatureGroup {
  id              Int                   @id @default(autoincrement())
  name            String                // Group name (e.g., "Home Page Features", "About Page Features")
  heading         String                // Display heading (e.g., "Why Saski AI?")
  subheading      String?               // Display subheading (e.g., "Simple. Smart. Built for growing businesses")
  isActive        Boolean               @default(true)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  groupItems      FeatureGroupItem[]    // Features in this group
  pageAssignments PageFeatureGroup[]    // Pages that use this group
  pageSections    PageSection[]         // Page builder references

  @@map("feature_groups")
}

model FeatureGroupItem {
  id             Int            @id @default(autoincrement())
  featureGroupId Int
  featureId      Int
  sortOrder      Int            @default(0)
  isVisible      Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  featureGroup   FeatureGroup   @relation(fields: [featureGroupId], references: [id], onDelete: Cascade)
  feature        GlobalFeature  @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([featureGroupId, featureId])
  @@map("feature_group_items")
}

model PageFeatureGroup {
  id             Int          @id @default(autoincrement())
  pageId         Int
  featureGroupId Int
  sortOrder      Int          @default(0)
  isVisible      Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  page           Page         @relation(fields: [pageId], references: [id], onDelete: Cascade)
  featureGroup   FeatureGroup @relation(fields: [featureGroupId], references: [id], onDelete: Cascade)

  @@unique([pageId, featureGroupId])
  @@map("page_feature_groups")
}

// Page Builder System
model PageSection {
  id              Int           @id @default(autoincrement())
  pageId          Int
  sectionType     String        // hero, features, media, testimonials, pricing, faq, cta, custom
  title           String?       // Section title/heading (optional override)
  subtitle        String?       // Section subtitle/subheading (optional override)
  content         String?       // JSON content for the section
  sortOrder       Int           @default(0)
  isVisible       Boolean       @default(true)
  // References to existing content
  heroSectionId   Int?          // Reference to HeroSection
  featureGroupId  Int?          // Reference to FeatureGroup
  mediaSectionId  Int?          // Reference to MediaSection
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  page            Page          @relation(fields: [pageId], references: [id], onDelete: Cascade)
  heroSection     HeroSection?  @relation(fields: [heroSectionId], references: [id], onDelete: SetNull)
  featureGroup    FeatureGroup? @relation(fields: [featureGroupId], references: [id], onDelete: SetNull)
  mediaSection    MediaSection? @relation(fields: [mediaSectionId], references: [id], onDelete: SetNull)

  @@map("page_sections")
}

// Pre-built section templates
model SectionTemplate {
  id          Int       @id @default(autoincrement())
  name        String    // Template name (e.g., "Hero with Video", "Features Grid", "Testimonials Carousel")
  sectionType String    // hero, features, media, testimonials, pricing, faq, cta
  description String?   // Template description
  thumbnail   String?   // Template preview image URL
  content     String    // JSON template structure
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("section_templates")
}

// Testimonials system
model Testimonial {
  id          Int       @id @default(autoincrement())
  name        String    // Customer name
  title       String?   // Customer title/position
  company     String?   // Customer company
  content     String    // Testimonial content/quote
  rating      Int?      // Rating out of 5
  avatarUrl   String?   // Customer avatar image URL
  logoUrl     String?   // Company logo URL
  isActive    Boolean   @default(true)
  isFeatured  Boolean   @default(false)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("testimonials")
}

// FAQ system
model FAQ {
  id          Int       @id @default(autoincrement())
  question    String    // FAQ question
  answer      String    // FAQ answer
  category    String?   // FAQ category (e.g., "General", "Technical", "Billing")
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("faqs")
}

// Pricing system
model PricingPlan {
  id          Int       @id @default(autoincrement())
  name        String    // Plan name (e.g., "Starter", "Professional", "Enterprise")
  description String?   // Plan description
  price       Float     // Plan price
  currency    String    @default("USD")
  interval    String    @default("month") // month, year, one-time
  features    String    // JSON array of features
  isPopular   Boolean   @default(false)
  isActive    Boolean   @default(true)
  ctaText     String?   // Custom CTA text
  ctaUrl      String?   // Custom CTA URL
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("pricing_plans")
}
