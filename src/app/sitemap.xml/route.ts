import path from 'path';
import { readFile } from 'fs/promises';
import { NextResponse } from 'next/server';
import { prisma } from '@/lib/db';

async function transformSitemapIndexToHTML(): Promise<string> {
  // Get stats for all sitemap types
  const [pagesCount, faqCategoriesCount, faqsCount, imagesCount] = await Promise.all([
    prisma.page.count(),
    prisma.fAQCategory.count({ where: { isActive: true } }),
    prisma.fAQ.count({ where: { isActive: true } }),
    prisma.mediaLibrary.count({ where: { isActive: true, isPublic: true, fileType: 'image' } })
  ]);

  const siteSettings = await prisma.siteSettings.findFirst();
  const baseUrl = siteSettings?.baseUrl || process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';

  const now = new Date().toISOString().split('T')[0] + ' ' + 
             new Date().toISOString().split('T')[1].substring(0, 8) + ' +00:00';

  return `<!DOCTYPE html>
<html>
<head>
  <title>XML Sitemap Index</title>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <style>
    body {
      font-family: Verdana, Geneva, sans-serif;
      font-size: 13px;
      margin: 20px;
      background-color: #fff;
      color: #333;
    }
    h1 {
      font-size: 24px;
      margin: 0 0 15px 0;
      color: #333;
    }
    .description {
      margin-bottom: 20px;
      line-height: 1.5;
    }
    .description p {
      margin: 8px 0;
    }
    .stats {
      background-color: #f9f9f9;
      padding: 15px;
      border-radius: 5px;
      margin: 15px 0;
    }
    .stats h3 {
      margin: 0 0 10px 0;
      color: #333;
    }
    .stats ul {
      margin: 0;
      padding: 0 0 0 20px;
    }
    a {
      color: #1e8cbe;
      text-decoration: none;
    }
    a:hover {
      text-decoration: underline;
    }
    table {
      border-collapse: collapse;
      width: 100%;
      margin-top: 20px;
    }
    th, td {
      text-align: left;
      padding: 8px 12px;
      border-bottom: 1px solid #ddd;
    }
    th {
      background-color: #f0f0f0;
      font-weight: bold;
    }
    tr:hover {
      background-color: #f5f5f5;
    }
    .url {
      word-break: break-all;
    }
    .description-col {
      color: #666;
      font-size: 12px;
    }
    .count {
      text-align: center;
      font-weight: bold;
      color: #333;
    }
    .lastmod {
      white-space: nowrap;
    }
  </style>
</head>
<body>
  <h1>XML Sitemap Index</h1>
  
  <div class="description">
    <p>Generated by <strong>Saski AI</strong>, this sitemap index organizes our sitemaps by content type for better SEO management.</p>
    <p>You can find more information about XML sitemaps on <a href="https://sitemaps.org" target="_blank">sitemaps.org</a>.</p>
    <p>This index references <strong>4 individual sitemaps</strong> containing our content.</p>
  </div>

  <div class="stats">
    <h3>Content Overview:</h3>
    <ul>
      <li><strong>${pagesCount}</strong> website page${pagesCount !== 1 ? 's' : ''}</li>
      <li><strong>${faqCategoriesCount + (faqCategoriesCount > 0 ? 1 : 0)}</strong> FAQ categor${faqCategoriesCount === 1 ? 'y' : 'ies'} (including main FAQ page)</li>
      <li><strong>${faqsCount}</strong> individual FAQ question${faqsCount !== 1 ? 's' : ''}</li>
      <li><strong>${imagesCount}</strong> image${imagesCount !== 1 ? 's' : ''} (logos, media library)</li>
    </ul>
  </div>
  
  <table>
    <thead>
      <tr>
        <th>Sitemap URL</th>
        <th>Description</th>
        <th>Content Count</th>
        <th>Last Modified</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="url">
          <a href="${baseUrl}/sitemap-pages.xml">${baseUrl}/sitemap-pages.xml</a>
        </td>
        <td class="description-col">Website pages (home, features, about, contact, etc.)</td>
        <td class="count">${pagesCount}</td>
        <td class="lastmod">${now}</td>
      </tr>
      <tr>
        <td class="url">
          <a href="${baseUrl}/sitemap-faq-categories.xml">${baseUrl}/sitemap-faq-categories.xml</a>
        </td>
        <td class="description-col">FAQ categories and main FAQ page</td>
        <td class="count">${faqCategoriesCount + (faqCategoriesCount > 0 ? 1 : 0)}</td>
        <td class="lastmod">${now}</td>
      </tr>
      <tr>
        <td class="url">
          <a href="${baseUrl}/sitemap-faq-questions.xml">${baseUrl}/sitemap-faq-questions.xml</a>
        </td>
        <td class="description-col">Individual FAQ question pages</td>
        <td class="count">${faqsCount}</td>
        <td class="lastmod">${now}</td>
      </tr>
      <tr>
        <td class="url">
          <a href="${baseUrl}/sitemap-images.xml">${baseUrl}/sitemap-images.xml</a>
        </td>
        <td class="description-col">Images (logos, media library, graphics)</td>
        <td class="count">${imagesCount}</td>
        <td class="lastmod">${now}</td>
      </tr>
    </tbody>
  </table>
</body>
</html>`;
}

export async function GET(request: Request) {
  try {
    const userAgent = request.headers.get('user-agent') || '';
    const acceptHeader = request.headers.get('accept') || '';
    
    // Log user agent for debugging
    console.log('üîç Sitemap.xml request:', {
      userAgent,
      acceptHeader,
      url: request.url
    });
    
    // Simplified logic: Only serve HTML if it's clearly a browser request
    // Default to XML for all other requests (APIs, crawlers, etc.)
    const isBrowserRequest = userAgent.includes('Mozilla') && 
                           userAgent.includes('Chrome') && 
                           acceptHeader.includes('text/html') &&
                           !userAgent.includes('bot') &&
                           !userAgent.includes('crawler') &&
                           !userAgent.includes('spider') &&
                           !userAgent.includes('Google-') &&
                           !userAgent.includes('APIs-Google');

    console.log('üîç Request classification:', {
      isBrowserRequest,
      willServeXML: !isBrowserRequest
    });

    // Generate sitemap index content
    const sitemapContent = await generateSitemapIndex();

    // For browser requests, serve as HTML
    if (isBrowserRequest) {
      const htmlContent = await transformSitemapIndexToHTML();
      return new NextResponse(htmlContent, {
        status: 200,
        headers: {
          'Content-Type': 'text/html; charset=utf-8',
          'Cache-Control': 'public, max-age=3600, stale-while-revalidate=86400'
        }
      });
    }

    // For search engines, serve as XML sitemap index
    return new NextResponse(sitemapContent, {
      status: 200,
      headers: {
        'Content-Type': 'application/xml',
        'Cache-Control': 'public, max-age=3600, stale-while-revalidate=86400'
      }
    });

  } catch (error) {
    console.error('Error serving sitemap index:', error);
    
    // Return a minimal sitemap index in case of error
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
    const errorSitemap = `<?xml version="1.0" encoding="UTF-8"?>
<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <sitemap>
    <loc>${baseUrl}/sitemap-pages.xml</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
  </sitemap>
</sitemapindex>`;

    return new NextResponse(errorSitemap, {
      status: 200,
      headers: {
        'Content-Type': 'application/xml',
        'Cache-Control': 'public, max-age=300'
      }
    });
  }
}

async function generateSitemapIndex(): Promise<string> {
  // Get site settings for base URL
  const siteSettings = await prisma.siteSettings.findFirst();
  const baseUrl = siteSettings?.baseUrl || process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';

  // Get stats for each sitemap type
  const [pages, faqCategories, faqs, images] = await Promise.all([
    prisma.page.findFirst({
      select: { updatedAt: true },
      orderBy: { updatedAt: 'desc' }
    }),
    prisma.fAQCategory.findFirst({
      where: { isActive: true },
      select: { updatedAt: true },
      orderBy: { updatedAt: 'desc' }
    }),
    prisma.fAQ.findFirst({
      where: { isActive: true },
      select: { updatedAt: true },
      orderBy: { updatedAt: 'desc' }
    }),
    prisma.mediaLibrary.findFirst({
      where: { isActive: true, isPublic: true, fileType: 'image' },
      select: { updatedAt: true },
      orderBy: { updatedAt: 'desc' }
    })
  ]);

  // Calculate last modification times
  const now = new Date().toISOString();
  const pagesLastMod = pages?.updatedAt ? new Date(pages.updatedAt).toISOString() : now;
  const faqCategoriesLastMod = faqCategories?.updatedAt ? new Date(faqCategories.updatedAt).toISOString() : now;
  const faqQuestionsLastMod = faqs?.updatedAt ? new Date(faqs.updatedAt).toISOString() : now;
  const imagesLastMod = images?.updatedAt ? new Date(images.updatedAt).toISOString() : now;

  return `<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/sitemap.xsl"?>
<!--
  Sitemap Index for Saski AI Website
  Generated dynamically on: ${new Date().toISOString()}
  
  This index references all individual sitemaps organized by content type:
  - Pages Sitemap: Website pages
  - FAQ Categories Sitemap: FAQ category pages only
  - FAQ Questions Sitemap: Individual FAQ question pages
  - Images Sitemap: All images (logos, media library, graphics)
  
  For more information about XML sitemaps, visit:
  https://www.sitemaps.org/protocol.html
-->
<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  
  <!-- Website Pages -->
  <sitemap>
    <loc>${baseUrl}/sitemap-pages.xml</loc>
    <lastmod>${pagesLastMod}</lastmod>
  </sitemap>
  
  <!-- FAQ Categories Only -->
  <sitemap>
    <loc>${baseUrl}/sitemap-faq-categories.xml</loc>
    <lastmod>${faqCategoriesLastMod}</lastmod>
  </sitemap>
  
  <!-- Individual FAQ Questions -->
  <sitemap>
    <loc>${baseUrl}/sitemap-faq-questions.xml</loc>
    <lastmod>${faqQuestionsLastMod}</lastmod>
  </sitemap>
  
  <!-- Images -->
  <sitemap>
    <loc>${baseUrl}/sitemap-images.xml</loc>
    <lastmod>${imagesLastMod}</lastmod>
  </sitemap>

</sitemapindex>`;
}

function escapeXML(str: string): string {
  return str
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&apos;');
} 